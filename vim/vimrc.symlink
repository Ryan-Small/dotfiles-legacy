"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible                " disable Vi compatibility

set nobackup                    " disable automatic backups
set nowritebackup               " write directly to the original file

set clipboard=unnamed           " enable copy & paster to MAC clipboard

set backspace=indent,eol,start  " enable backspacing over everything in insert mode

" enable the mouse if available
if has('mouse')
  set mouse=a
endif

" remap heavily used keys
let mapleader="\\"
imap jj <ESC>

" Map VIM movements with split switching.
map <C-H> <C-W>h
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l

noremap + <PageDown>
noremap - <PageUp>

syntax enable               " enable syntax highlighting
set t_Co=256                " enable 256-color mode
set history=50              " keep 50 lines of command line history
set numberwidth=4           " set the number gutter width
set number                  " show line number
set cul                     " highlight the current line
set nohlsearch              " don't continue to highlight searched phrases
set incsearch               " do highlight as search is being typed
set ignorecase              " make searches case-insensitive
set showmatch               " highlight the matching brace
set visualbell              " use the visual indicator instead of a sound
set ruler                   " show info along bottom
set showcmd	                " display incomplete commands
set relativenumber          " turn hybrid line numbers on
set softtabstop=4           " insert/delete x spaces on TAB/BACKSPACE
set shiftwidth=4            " << and >> moves row x columns
set tabstop=4               " a hard TAB displays as x columns
set shiftround              " round indent to multiple of 'shiftwidth'
set smartindent             " automatically inserts extra level of indentation
set expandtab               " insert spaces when hitting TABs
set autoindent              " auto indent new lines
set nowrap                  " stop wrapping by default


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Python Specific
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <buffer> <F5> :exec '!venv/bin/python' shellescape(@%, 1)<cr>
autocmd bufreadpre *.py setlocal textwidth=79
"autocmd BufWritePost *.py call Pyflakes()
"autocmd BufWritePost *.py call Pep8()

" highlight the wraparound column
if exists('+colorcolumn')
  autocmd bufreadpre *.py set colorcolumn=79
  autocmd bufreadpre *.py highlight ColorColumn ctermbg=234
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Custom Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim). Also don't do it when the mark is in
" the first line, that is the default position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" set the syntax highlighting for the various extensions
au BufNewFile,BufRead *.gradle setf groovy


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Automatically install plug, if needed.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'flazz/vim-colorschemes'

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

Plug 'scrooloose/nerdcommenter'

Plug 'airblade/vim-gitgutter'
Plug 'edkolev/tmuxline.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'ntpeters/vim-better-whitespace'
Plug 'rstacruz/vim-closer'
Plug 'easymotion/vim-easymotion'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
"CocInstall coc-tsserver coc-eslint coc-json coc-prettier coc-css coc-angular coc-highlight coc-html coc-java coc-python

Plug 'Shougo/echodoc.vim'

call plug#end()


" VIM-COLORSCHEMES """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" colorscheme molokai
colorscheme busybee
" colorscheme iceberg
" colorscheme impact
" colorscheme obsidian
" colorscheme sorcerer
" colorscheme twilight256
" colorscheme distinguished


" NERDTREE """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F3> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable='▸'
let g:NERDTreeDirArrowCollapsible='▾'
let NERDTreeShowBookmarks=1
let g:NERDTreeShowHidden=1
let g:NERDTreeMinimalUI=1
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$', '__pycache__', '\.swp$', '^\.DS_Store$', '\.git$[[dir]]', '\.idea$[[dir]]', '\.sass-cache$']

" close vim if only NERDTree is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" COC """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <silent> <leader>dd <Plug>(coc-definition)
nmap <silent> <leader>dr <Plug>(coc-references)
nmap <silent> <leader>dj <Plug>(coc-implementation)
nnoremap <silent> <leader>ds :<C-u>CocList -I -N --top symbols<CR>

" use <tab> for trigger completion and navigate to next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

"Close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" VIM-BETTER-WHITESPACE """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>y :StripWhitespace<CR>

" DEVICONS """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:webdevicons_enable_nerdtree=1
let g:webdevicons_enabl=1
let g:WebDevIconsNerdTreeAfterGlyphPadding=' '

" NERDCOMMENTER """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDSpaceDelims=1

" VIM-GITGUTTER """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:gitgutter_enabled =1

" AIRLINE """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tmuxline#enabled=0
let g:airline_theme="powerlineish"
" let g:airline_theme="hybridline"
" let g:airline_theme="ravenpower"


